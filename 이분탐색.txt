- 이분탐색(Binary Search)의 개념
    :정렬된 배열에서 특정한 값을 효율적으로 찾는 탐색 알고리즘
    :배열의 중간값을 선택해 찾고자 하는 값과 비교하고
    찾고자 하는 값이 중간 값보다 작으면 중간 값의 왼쪽 부분 배열을 대상으로 탐색, 크면 오른쪽 부분 배열을 대상을 탐색하는 과정을 반복
    이렇게 하면 탐색범위를 줄여 시간초과를 줄일 수 있음

    :이분 탐색의 핵심 아이디어 --> 탐색 범위를 반씩 나누어 탐색하는 것
    :이를 통해 탐색 시 평균적으로 O(log n)의 시간 복잡도를 가질수 있음
    
    :이분 탐색은 주로 정렬된 배열에서 특정 값의 존재 여부를 확인하거나
    : 특정 값의 위치를 찾는 문제에 사용됨
    : 최솟값이나 퇴댓값을 찾는 문제에도 적용될 수 있음
    : 이분탐색은 탐색 범위를 반으로 나누기 떄문에 탐색 과정에서 중간 값을 기준으로 조건을 검사해 탐색 범위를 축소할 수 있는 문제에 적합

    :반복문을 사용하는 방식과 재귀함수를 사용하는 방식으로 구현할 수 있음

    :이분탐색 적용 시 탐색 대상이 정렬된 배열이라는 제약조건을 유의해야 함
    :다만 탐색 속도가 빠르고 간결한 구현이 가능하다는 장점을 가짐

- 이분탐색 문제 유형
    1. 값의 존재 여부 확인
        : 주어진 배열에서 특정 값이 존재하는지 여부를 확인하는 문제

    2. 값의 위치를 찾는 문제가
        : 주어진 배열에서 특정 값이 처음 등장하는 위치 또는 마지막으로 등장하는 위치를 찾는 문제

    3. 최솟값 또는 최댓값 찾기
        : 정렬된 배열에서 최솟값 또는 최댓값을 찾는 문제가
    
    4. 특정 조건을 만족하는 값 찾기
        : 가령 특정 값을 초과하는 첫 번째 값, 특정 값 이하인 마지막 값 등을 찾는 문제

    5. 주어진 값과 가장 가까운 값 찾기
        : 주어진 값과 차이를 최소화하는 값을 찾는 문제

- 이분탐색의 장단점
    1. 장점
        (1) 빠른 탐색 속도
        (2) 간결하고 이해하기 쉬운 구현
        (3) 정렬된 배열이라면 모든 배열에서 수행 가능

    2. 단점
        (1) 정렬된 배열이 요구됨
        (2) 탐색 범위를 축소하는 과정에서 일정한 추가 메모리 공간 사용량을 요구함
        (3) 원하는 값을 찾을 수 없는 경우 이를 처리하기 위해 추가적인 로직을 구현해야 됨